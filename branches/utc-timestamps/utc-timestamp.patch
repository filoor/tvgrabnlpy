--- tv_grab_nl_py	2009-04-19 22:10:34.000000000 +0200
+++ new/tv_grab_nl_py	2009-04-19 22:10:27.000000000 +0200
@@ -241,7 +241,6 @@
        'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.8) Gecko/20071022 Ubuntu/7.10 (gutsy) Firefox/2.0.0.8'
        ]
 
-
 # Work in progress, the idea is to cache program categories and
 # descriptions to eliminate a lot of page fetches from tvgids.nl
 # for programs that do not have interesting/changing descriptions
@@ -352,6 +351,7 @@
     print '--slowdays    = grab slowdays initial days and the rest in fast mode'
     print '--max_overlap = maximum length of overlap between programming to correct [minutes]'
     print '--overlap_strategy = what strategy to use to correct overlaps (check top of source code)'
+    print '--utc         = generate all data in UTC time (use with timezone "auto" in mythtv)'
 
 
 def filter_line_identity(m, defs=htmlentitydefs.entitydefs):
@@ -392,16 +392,12 @@
     return s
     
 
-def calc_timezone(t):
+def calc_timezone(t, use_utc):
     """
     Takes a time from tvgids.nl and formats it with all the required
     timezone conversions.
     in: '20050429075000'
-    out:'20050429075000 (CET|CEST)'
-
-    Until I have figured out how to correctly do timezoning in python this method
-    will bork if you are not in a zone that has the same DST rules as 'Europe/Amsterdam'.
-
+    out:'20050429065000 (CET|CEST|UTC)'
     """
 
     year = int(t[0:4])
@@ -410,26 +406,42 @@
     hour = int(t[8:10])
     minute = int(t[10:12])
 
-    #td = {'CET': '+0100', 'CEST': '+0200'}
-    #td = {'CET': '+0100', 'CEST': '+0200', 'W. Europe Standard Time' : '+0100', 'West-Europa (standaardtijd)' : '+0100'}
-    td = {0 : '+0100', 1 : '+0200'}
+    timestamp = ''
 
-    pt = time.mktime((year,month,day,hour,minute,0,0,0,-1))
-    timezone=''
-    try:
-        #timezone = time.tzname[(time.localtime(pt))[-1]]
-        timezone = (time.localtime(pt))[-1]
-    except:
-        sys.stderr.write('Cannot convert time to timezone')
+    if use_utc:
+        # evil: set the TZ environment to amsterdam... reset it back later
+        # I can't think of a less evil way to do this in the current python [Huub]
+        old_tz = os.environ.get('TZ')
+        os.environ['TZ'] = 'Europe/Amsterdam'
+        time.tzset()
+        pt = time.mktime((year,month,day,hour,minute,0,0,0,-1))
+        localtime = time.localtime(pt)
+        utc = time.gmtime(pt)
+        utc_stamp = time.strftime('%Y%m%d%H%M00', utc)
+        if old_tz:
+            os.environ['TZ'] = old_tz
+        else:
+            del os.environ['TZ']
+        time.tzset()
+        timestamp = '%s %s' % (utc_stamp, 'UTC')
+    else:
+        td = {0 : '+0100', 1 : '+0200'}
+        pt = time.mktime((year,month,day,hour,minute,0,0,0,-1))
+        timezone=''
+        try:
+            timezone = (time.localtime(pt))[-1]
+        except:
+            sys.stderr.write('Cannot convert time to timezone')
+        timestamp = t+' %s' % td[timezone]
 
-    return t+' %s' % td[timezone]
+    return timestamp
 
-def format_timezone(td):
+def format_timezone(td, use_utc):
     """
     Given a datetime object, returns a string in XMLTV format
     """
     tstr = td.strftime('%Y%m%d%H%M00')
-    return calc_timezone(tstr)
+    return calc_timezone(tstr, use_utc)
 
 def get_page_internal(url, quiet=0):
     """
@@ -1043,7 +1055,7 @@
        program['titel aflevering'] = program['name'][colonpos+1:len(program['name'])].strip()
        program['name'] =  program['name'][0:colonpos].strip()
 
-def xmlefy_programs(programs, channel, desc_len, compat=0, nocattrans=0):
+def xmlefy_programs(programs, channel, desc_len, compat=0, nocattrans=0, use_utc=0):
     """
     Given a list of programming (from get_channels())
     returns a string with the xml equivalent
@@ -1059,7 +1071,7 @@
             print program
 
         output.append('  <programme start="%s" stop="%s" channel="%s%s" %s> \n' % \
-            (format_timezone(program['start-time']), format_timezone(program['stop-time']),\
+            (format_timezone(program['start-time'], use_utc), format_timezone(program['stop-time'], use_utc),\
              channel, compat and '.tvgids.nl' or '', clumpidx))
 
         output.append('    <title lang="nl">%s</title>\n' % filter_line(program['name']))
@@ -1136,7 +1148,7 @@
                                                        "preferredmethod", "days=", 
                                                        "configure", "fast", "slow",
                                                        "cache=", "clean_cache", 
-                                                       "slowdays=","compat",
+                                                       "slowdays=","compat", "utc",
                                                        "desc-length=","description",
                                                        "nocattrans","config-file=",
                                                        "max_overlap=", "overlap_strategy=",
@@ -1201,6 +1213,14 @@
     clean_cache = 1
     clear_cache = 0
 
+    # don't convert all the program date/times to UTC (GMT) timezone.
+    # by default the current timezone is Europe/Amsterdam. This works fine
+    # if you are located in the Amsterdam timezone, but not if you live abroad
+    # in another timezone. If you want to use the UTC timestamp in combination
+    # with mythtv, be sure to set the timezone in mythtv to 'auto'
+    # (TimeOffset in Settings table)
+    use_utc = False
+
     # seed the random generator
     random.seed(time.time())
 
@@ -1301,6 +1321,8 @@
             max_overlap = int(a)
         if o == "--overlap_strategy":
             overlap_strategy = a
+        if o == "--utc":
+            use_utc = True
 
     # get configfile if available
     try:
@@ -1374,7 +1396,7 @@
             for program in blah:
                title_split(program)
 
-        print xmlefy_programs(blah, id, desc_len, compat, nocattrans)
+        print xmlefy_programs(blah, id, desc_len, compat, nocattrans, use_utc)
 
         # save the cache after each channel fetch 
         if program_cache != None:
